import React, { useState } from "react";
import styles from "./Cart.module.css";
import { useCart } from "./CartContext";

function Cart() {
  const [isCartOpen, setCartOpen] = useState(false);
  const [isOrderModalOpen, setOrderModalOpen] = useState(false);
  const {
    cartItems,
    clearCart,
    increaseQuantity,
    decreaseQuantity,
    removeFromCart,
  } = useCart();

  const toggleCart = () => {
    setCartOpen((prev) => !prev);
  };

  const calculateTotal = () => {
    return cartItems.reduce((total, item) => total + item.price * item.quantity, 0);
  };

  const calculateItemCount = () => {
    return cartItems.reduce((count, item) => count + item.quantity, 0);
  };

  const orderCart = () => {
    setOrderModalOpen(true);
  };

  const closeOrderModal = () => {
    setOrderModalOpen(false);
    setErrorMessage("");
  };

  const [deliveryType, setDeliveryType] = useState("carryout");
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    phone: "",
    address: "",
  });

  const [errorMessage, setErrorMessage] = useState(""); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    if (errorMessage) setErrorMessage(""); // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  };

  const handleDeliveryTypeChange = (e) => {
    setDeliveryType(e.target.value);
    if (e.target.value === "carryout") {
      setFormData((prev) => ({ ...prev, address: "" }));
    }
  };

  const isFormValid = () => {
    return (
      formData.firstName.trim() &&
      formData.lastName.trim() &&
      formData.phone.trim() &&
      (deliveryType === "carryout" || (deliveryType === "delivery" && formData.address.trim()))
    );
  };

  const handlePayment = () => {
    if (!isFormValid()) {
      setErrorMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è."); // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    } else {
      alert("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
      setOrderModalOpen(false);
      clearCart();
      setErrorMessage(""); // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    }
  };

  return (
    <>
      {/* –ò–∫–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—Ä–∑–∏–Ω—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
      <div className={styles.cartIcon} onClick={toggleCart}>
        üõí <span className={styles.itemCount}>{calculateItemCount()}</span>
      </div>

      {isCartOpen && (
        <div className={styles.cartOverlay}>
          <div className={styles.cartContent}>
            <h2>–ö–æ—Ä–∑–∏–Ω–∞</h2>
            <ul className={styles.cartList}>
              {cartItems.length > 0 ? (
                cartItems.map((item) => (
                  <li key={item.id} className={styles.cartItem}>
                    <div className={styles.productImage}>
                      <img src={item.image} alt={item.name} />
                    </div>
                    <div className={styles.cartDetails}>
                      <span>
                        {item.name} x {item.quantity}
                      </span>
                      <div className={styles.quantityControls}>
                        <button
                          className={styles.controlButton}
                          onClick={() => decreaseQuantity(item.id)}
                        >
                          -
                        </button>
                        <button
                          className={styles.controlButton}
                          onClick={() => increaseQuantity(item.id)}
                        >
                          +
                        </button>
                        <button
                          className={styles.controlButton}
                          onClick={() => removeFromCart(item.id)}
                        >
                          ‚úñ
                        </button>
                      </div>
                    </div>
                    <span>{item.price * item.quantity} ‚ÇΩ</span>
                  </li>
                ))
              ) : (
                <p>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
              )}
            </ul>
            <div className={styles.cartTotal}>
              <strong>–ò—Ç–æ–≥–æ ({calculateItemCount()} —à—Ç.):</strong> {calculateTotal()} ‚ÇΩ
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫–∞–∑–∞—Ç—å" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ */}
            {cartItems.length > 0 && (
              <button className={styles.orderButton} onClick={orderCart}>
                –ó–∞–∫–∞–∑–∞—Ç—å
              </button>
            )}

            <button className={styles.clearButton} onClick={clearCart}>
              –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
            </button>
            <button className={styles.closeButton} onClick={toggleCart}>
              –ó–∞–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É
            </button>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫–∞–∑–∞ */}
      {isOrderModalOpen && (
        <div className={styles.orderModalOverlay}>
          <div className={styles.orderModal}>
            <h2>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
            <form className={styles.orderForm}>
              <label>
                –ò–º—è:
                <input
                  type="text"
                  name="firstName"
                  value={formData.firstName}
                  onChange={handleChange}
                />
              </label>
              <label>
                –§–∞–º–∏–ª–∏—è:
                <input
                  type="text"
                  name="lastName"
                  value={formData.lastName}
                  onChange={handleChange}
                />
              </label>
              <label>
                –¢–µ–ª–µ—Ñ–æ–Ω:
                <input
                  type="tel"
                  placeholder="+7 999 999 99 99"
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                />
              </label>
              <label>
                –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:
                <select
                  name="deliveryType"
                  value={deliveryType}
                  onChange={handleDeliveryTypeChange}
                >
                  <option value="carryout">–° —Å–æ–±–æ–π</option>
                  <option value="delivery">–ù–∞ –¥–æ–º</option>
                </select>
              </label>
              {deliveryType === "delivery" && (
                <label>
                  –ê–¥—Ä–µ—Å:
                  <input
                    type="text"
                    name="address"
                    value={formData.address}
                    onChange={handleChange}
                  />
                </label>
              )}

              {errorMessage && <p className={styles.errorMessage}>{errorMessage}</p>}

              <button
                className={styles.paymentButton}
                type="button"
                onClick={handlePayment}
              >
                –û–ø–ª–∞—Ç–∏—Ç—å
              </button>
              <button
                className={styles.closeModalButton}
                type="button"
                onClick={closeOrderModal}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </form>
          </div>
        </div>
      )}
    </>
  );
}

export default Cart;

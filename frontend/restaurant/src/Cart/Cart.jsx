import React, { useState } from "react";
import styles from "./Cart.module.css";
import { useCart } from "./CartContext";

function Cart() {
  const [isCartOpen, setCartOpen] = useState(false);
  const [isOrderModalOpen, setOrderModalOpen] = useState(false);
  const {
    cartItems,
    clearCart,
    increaseQuantity,
    decreaseQuantity,
    removeFromCart,
  } = useCart();

  const toggleCart = () => {
    setCartOpen((prev) => !prev);
  };

  const calculateTotal = () => {
    return cartItems.reduce((total, item) => total + item.price * item.quantity, 0);
  };

  const calculateItemCount = () => {
    return cartItems.reduce((count, item) => count + item.quantity, 0);
  };

  const orderCart = () => {
    setOrderModalOpen(true);
  };

  const closeOrderModal = () => {
    setOrderModalOpen(false);
    setErrorMessage("");
  };

  const [deliveryType, setDeliveryType] = useState("carryout");
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    phone: "",
    email: "",
    address: "",
  });

  const [errorMessage, setErrorMessage] = useState("");

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    if (errorMessage) setErrorMessage("");
  };

  const handleDeliveryTypeChange = (e) => {
    setDeliveryType(e.target.value);
    if (e.target.value === "carryout") {
      setFormData((prev) => ({ ...prev, address: "" }));
    }
  };

  const isFormValid = () => {
    const fullName = `${formData.firstName.trim()} ${formData.lastName.trim()}`;
    return (
      fullName.trim() && // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
      formData.phone.trim() &&
      formData.email.trim() &&
      (deliveryType === "carryout" || (deliveryType === "delivery" && formData.address.trim()))
    );
  };

  const sendOrderRequest = async () => {
    const expandItems = (category) =>
      cartItems
        .filter((item) => item.category === category)
        .flatMap((item) => Array(item.quantity).fill(item.id));
  
    const fullName = `${formData.firstName.trim()} ${formData.lastName.trim()}`;
    const formattedPhone = formData.phone.replace(/\+/g, ""); // –£–±–∏—Ä–∞–µ–º –ø–ª—é—Å –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  
    const requestData = {
      client: {
        name: fullName,
        contact: formattedPhone, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      },
      status: "ACCEPTED",
      dishesIds: expandItems("Dish"),
      drinksIds: expandItems("Drink"),
      desertsIds: expandItems("Desert"),
    };
  
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
      for (const item of cartItems) {
        const inventoryResponse = await fetch(
          `http://localhost:8080/api/inventory/search?productName=${encodeURIComponent(item.name)}`
        );
        if (!inventoryResponse.ok) {
          throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞.");
        }
  
        const inventoryData = await inventoryResponse.json();
        const productData = inventoryData.find(
          (product) => product.productName === item.name
        );
  
        if (!productData || productData.quantity < item.quantity) {
          setErrorMessage(
            `–¢–æ–≤–∞—Ä–∞ "${item.name}" –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${productData?.quantity || 0}.`
          );
          return;
        }
  
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
        const updateResponse = await fetch(
          `http://localhost:8080/api/inventory/update/${productData.id}`,
          {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              productName: item.name,
              quantity: productData.quantity - item.quantity,
              supplier: productData.supplier,
            }),
          }
        );
  
        if (!updateResponse.ok) {
          throw new Error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ "${item.name}".`
          );
        }
      }
  
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
      const orderResponse = await fetch("http://localhost:8080/api/orders", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestData),
      });
  
      if (!orderResponse.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
      }
  
      alert("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
      clearCart();
      setOrderModalOpen(false);
      setErrorMessage("");
    } catch (error) {
      setErrorMessage(error.message);
    }
  };
  
  
  const handlePayment = () => {
    if (!isFormValid()) {
      setErrorMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.");
    } else {
      sendOrderRequest();
    }
  };

  return (
    <>
      {/* –ò–∫–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—Ä–∑–∏–Ω—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
      <div className={styles.cartIcon} onClick={toggleCart}>
        üõí <span className={styles.itemCount}>{calculateItemCount()}</span>
      </div>

      {isCartOpen && (
        <div className={styles.cartOverlay}>
          <div className={styles.cartContent}>
            <h2 className={styles.cartTitle}>–ö–æ—Ä–∑–∏–Ω–∞</h2>
            <ul className={styles.cartList}>
              {cartItems.length > 0 ? (
                cartItems.map((item) => (
                  <li key={item.id} className={styles.cartItem}>
                    <div className={styles.productImage}>
                      <img src={item.src} alt={item.name} />
                    </div>
                    <div className={styles.itemPrice}>
                      <div className={styles.cartDetails}>
                        <span className={styles.cartItemTitle}>
                          {item.name} x {item.quantity}
                        </span>
                        <div className={styles.quantityControls}>
                          <button
                            className={styles.controlButton}
                            onClick={() => decreaseQuantity(item.id, item.category)}
                          >
                            -
                          </button>
                          <button
                            className={styles.controlButton}
                            onClick={() => increaseQuantity(item.id, item.category)}
                          >
                            +
                          </button>
                          <button
                            className={styles.controlButton}
                            onClick={() => removeFromCart(item.id, item.category)}
                          >
                            ‚úñ
                          </button>
                        </div>
                      </div>
                      <span>{item.price * item.quantity} ‚ÇΩ</span>
                    </div>
                  </li>
                ))
              ) : (
                <p>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
              )}
            </ul>
            <div className={styles.cartTotal}>
              <strong >–ò—Ç–æ–≥–æ ({calculateItemCount()} —à—Ç.):</strong> {calculateTotal()} ‚ÇΩ
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫–∞–∑–∞—Ç—å" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ */}
            {cartItems.length > 0 && (
              <button className={styles.orderButton} onClick={orderCart}>
                –ó–∞–∫–∞–∑–∞—Ç—å
              </button>
            )}

            <button className={styles.clearButton} onClick={clearCart}>
              –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
            </button>
            <button className={styles.closeButton} onClick={toggleCart}>
              –ó–∞–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É
            </button>
          </div>
        </div>
      )}

     {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫–∞–∑–∞ */}
      {isOrderModalOpen && (
        <div className={styles.orderModalOverlay}>
          <div className={styles.orderModal}>
            <div className={styles.orderTitle}>
              <h1>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
            </div>
            <div className={styles.orderItems}>
              <h2>–í–∞—à –∑–∞–∫–∞–∑:</h2>
              <ul className={styles.orderItemList}>
                {cartItems.map((item) => (
                  <li key={item.id} className={styles.orderItem}>
                    <span>
                      {item.name} x {item.quantity}
                    </span>
                    <span> - {item.price * item.quantity} ‚ÇΩ</span>
                  </li>
                ))}
              </ul>
              <div className={styles.orderTotal}>
                <strong>–ò—Ç–æ–≥–æ:</strong> {calculateTotal()} ‚ÇΩ
              </div>
            </div>
            <form className={styles.orderForm}>
              <div className={styles.orderFormText}>
                <label>
                  –ò–º—è*:
                  <input
                    type="text"
                    name="firstName"
                    value={formData.firstName}
                    onChange={handleChange}
                  />
                </label>
                <label>
                  –§–∞–º–∏–ª–∏—è*:
                  <input
                    type="text"
                    name="lastName"
                    value={formData.lastName}
                    onChange={handleChange}
                  />
                </label>
                <label>
                  –¢–µ–ª–µ—Ñ–æ–Ω*:
                  <input
                    type="tel"
                    placeholder="+7 999 999 99 99"
                    name="phone"
                    value={formData.phone}
                    onChange={handleChange}
                  />
                </label>
                <label>
                  Email*:
                  <input
                    type="text"
                    placeholder="email@mail.com"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                  />
                </label>
                <label>
                  –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:
                  <select
                    name="deliveryType"
                    value={deliveryType}
                    onChange={handleDeliveryTypeChange}
                  >
                    <option value="carryout">–° —Å–æ–±–æ–π</option>
                    <option value="delivery">–ù–∞ –¥–æ–º</option>
                  </select>
                </label>
                {deliveryType === "delivery" && (
                  <label>
                    –ê–¥—Ä–µ—Å*:
                    <input
                      type="text"
                      name="address"
                      value={formData.address}
                      onChange={handleChange}
                    />
                  </label>
                )}
                {errorMessage && <p className={styles.errorMessage}>{errorMessage}</p>}
              </div>
              <button
                className={styles.paymentButton}
                type="button"
                onClick={handlePayment}
              >
                –û–ø–ª–∞—Ç–∏—Ç—å
              </button>
              <button
                className={styles.closeModalButton}
                type="button"
                onClick={closeOrderModal}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </form>
          </div>
        </div>
      )}
    </>
  );
}

export default Cart;
